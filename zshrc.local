# init z https://github.com/rupa/z
. ~/z/z.sh


###########
#### REPLACE ANTIGEN WITH ANTIBODY
###########

# tell omz where it lives
# export ZSH="/usr/local/bin/zsh"
export ZSH=~/.oh-my-zsh


# Load the oh-my-zsh's library.
# antibody use oh-my-zsh DOESN'T WORK
# Instead, do the follwing
#
# see base omz config: https://github.com/robbyrussell/oh-my-zsh/blob/master/templates/zshrc.zsh-template

# where is antibody keeping its stuff?
ANTIBODY_HOME="$(antibody home)"
DISABLE_AUTO_UPDATE="true"

# antibody bundles from a text file listing bundles
antibody bundle <  ~/dotfiles-local/zsh/plugins.txt >~/.zsh_plugins.sh

##########
#### END ANTIBODY
##########

########################################################################
################# SET UP ANTIGEN PLUGIN MANAGER FOR ZSH ################
########################################################################

## Manage Oh-My-Zsh plugins with Antigen
#source $(brew --prefix)/share/antigen/antigen.zsh

## Load the oh-my-zsh's library.
#antigen use oh-my-zsh

## Bundles from the default repo (robbyrussell's oh-my-zsh).
#antigen bundle colorize
#antigen bundle command-not-found
#antigen bundle git
#antigen bundle git-flow
#antigen bundle helm
#antigen bundle history
#antigen bundle poetry
## already installed: antigen bundle z


## Syntax highlighting bundle.

#antigen bundle zsh-users/zsh-autosuggestions

## I've read it should be the last bundle but I'm not sure why.
## antigen bundle zsh-users/zsh-syntax-highlighting
#antigen bundle zdharma/fast-syntax-highlighting

## Load the theme.
## antigen theme robbyrussell

## Tell Antigen that you're done.
#antigen apply

############################## END ANTIGEN #############################

##########
#### External plugins
##########

# loaded with antigen (now loaded with antibody)
# replaces previous now that we're using antibody
# previous was: source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh
source /Users/levbrie/Library/Caches/antibody/https-COLON--SLASH--SLASH-github.com-SLASH-zsh-users-SLASH-zsh-autosuggestions/zsh-autosuggestions.zsh

# accept zsh-autosuggestions autosuggest with tab:
bindkey 'TAB' autosuggest-accept
bindkey '^Y' autosuggest-accept

# keep tons of history
export HISTFILE=~/.zsh_history
HISTSIZE=10000
HISTFILESIZE=100000
SAVEHIST=10000

unsetopt correct
unsetopt AUTO_CD
setopt appendhistory
setopt sharehistory
setopt incappendhistory

export PATH=/usr/local/bin:$PATH
export PATH=~/bin:$PATH
export EDITOR=vim

export WORKON_HOME=~/git/venvs
export PROJECT_HOME="$HOME/git/python-dev"
export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python
export VIRTUALENVWRAPPER_VIRTUALENV=`which virtualenv`
# this line is really slow so I'm commenting it out for right now
# source `which virtualenvwrapper.sh`

export GOPATH=$HOME/git/golang:$HOME/git/learning/goeg
export PATH=$PATH:$GOPATH/bin

alias showFinderFiles='defaults write com.apple.finder AppleShowAllFiles YES; killall Finder /System/Library/CoreServices/Finder.app'
alias hideFinderFiles='defaults write com.apple.finder AppleShowAllFiles NO; killall Finder /System/Library/CoreServices/Finder.app'

export PATH="$HOME/.bin:$PATH"

# Path to your oh-my-zsh installation.
# export ZSH=~/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="sorin"

source '/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc'
source '/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc'

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder


# User configuration

# export PATH="/Users/lev/.bin:/Users/lev/.bin:/Users/lev/bin:/usr/local/bin:/Users/lev/.nvm/versions/node/v5.10.0/bin:.git/safe/../../bin:/Users/lev/.rbenv/shims:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/go/bin:/Library/Frameworks/Python.framework/Versions/2.7/bin:/Library/Frameworks/Python.framework/Versions/3.4/bin:/Users/lev/git/golang:/Users/lev/git/learning/goeg/bin"
# export MANPATH="/usr/local/man:$MANPATH"

source $ZSH/oh-my-zsh.sh

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/dsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# homebrew has installed formulae that put executables that
# in /usr/local/sbin, so we need to add it to our path
export PATH="/usr/local/sbin:$PATH"

# load iTerm2 shell integration at login time
test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# IPython Notebook Spark integration, added by aws.sh
export SPARK_HOME='/usr/local/Cellar/apache-spark/1.4.1'
# Appending pyspark-shell is needed for Spark 1.4+
export PYSPARK_SUBMIT_ARGS='--master local[2] pyspark-shell'


# add poetry to path
# source $HOME/.poetry/env
export PATH="$HOME/.poetry/bin:$PATH"

# enable poetry
fpath+=~/.zfunc

# add docker autocompletion
# fpath=(~/.zsh/completion $fpath)

# This compinit is too slow
autoload -Uz compinit && compinit -i

### # See https://gist.github.com/ctechols/ca1035271ad134841284
### # On slow systems, checking the cached .zcompdump file to see if it must be
### # regenerated adds a noticable delay to zsh startup.  This little hack restricts
### # it to once a day.  It should be pasted into your own completion file.
### #
### # The globbing is a little complicated here:
### # - '#q' is an explicit glob qualifier that makes globbing work within zsh's [[ ]] construct.
### # - 'N' makes the glob pattern evaluate to nothing when it doesn't match (rather than throw a globbing error)
### # - '.' matches "regular files"
### # - 'mh+24' matches files (or directories or whatever) that are older than 24 hours.
### autoload -Uz compinit
### if [[ -n ${ZDOTDIR}/.zcompdump(#qN.mh+24) ]]; then
### 	compinit;
### else
### 	compinit -C;
### fi;

# # nvm command that is super slow
# export NVM_DIR="$HOME/.nvm"
# [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm

# attempt to fix nvm slowness:
DEFAULT_NODE_VERSION='10.10.0'

# Ensure we have a default node version in our PATH at startup
if [ -d "${HOME}/.nvm/versions/node/v${DEFAULT_NODE_VERSION}/bin" ] ; then
  PATH="${HOME}/.nvm/versions/node/v${DEFAULT_NODE_VERSION}/bin:${PATH}"
fi

# Avoid using the slow `nvm use` at startup.
# We already have a default node available in our PATH.
[[ -s "$NVM_DIR/nvm.sh" ]]          && source "$NVM_DIR/nvm.sh" --no-use

##########
##### END ATTEMPT TO FIX NVM SLOWNESS
##########

# turn on zsh-syntax-highlighting - needs to be at the end of .zshrc
# cf https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
# plugins=(git zsh-syntax-highlighting zsh-autosuggestions)

# zplug "zsh-users/zsh-syntax-highlighting", defer:2

# GO SETTINGS - SET UP PATH VARIABLES FOR GOLANG
# export PATH=$PATH:/usr/local/opt/go/libexec/bin
export GOPATH=$HOME/go             # path to go workspace
export PATH=$PATH:$GOPATH/bin

# add path to go distribution from homebrew
export GOROOT="$(brew --prefix golang)/libexec"
export PATH="$PATH:${GOPATH}/bin:${GOROOT}/bin"

if type nvim > /dev/null 2>&1; then
  alias vim='nvim'
fi

export CXX="clang"

# added by Anaconda3 5.2.0 installer
export PATH="/anaconda3/bin:$PATH"
if [ -e /Users/levbrie/.nix-profile/etc/profile.d/nix.sh ]; then . /Users/levbrie/.nix-profile/etc/profile.d/nix.sh; fi # added by Nix installer
# added by Anaconda3 2018.12 installer
# >>> conda init >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$(CONDA_REPORT_ERRORS=false '/Users/levbrie/anaconda3/bin/conda' shell.bash hook 2> /dev/null)"
if [ $? -eq 0 ]; then
    \eval "$__conda_setup"
else
    if [ -f "/Users/levbrie/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/Users/levbrie/anaconda3/etc/profile.d/conda.sh"
        CONDA_CHANGEPS1=false conda activate base
    else
        \export PATH="/Users/levbrie/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda init <<<

# For compilers to find zlib you may need to set:
export LDFLAGS="-L/usr/local/opt/zlib/lib"
export CPPFLAGS="-I/usr/local/opt/zlib/include"

# For pkg-config to find zlib you may need to set:
export PKG_CONFIG_PATH="/usr/local/opt/zlib/lib/pkgconfig"

# load python environments automatically when possible
# export PATH="/Users/levbrie/.pyenv/bin:$PATH"
# eval "$(pyenv init -)"
# eval "$(pyenv init - zsh --no-rehash)"
# eval "$(pyenv virtualenv-init -)"
# eval "$(pyenv virtualenv-init -)"

export PATH="$HOME/.pyenv/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

# for profiling at this at the end of zshrc and the appropriate corresponding
# line at the beginning
# zprof # bottom of .zshrc
